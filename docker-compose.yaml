services:
  server: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: management_python
    # env_file: 
    #   - .env  # 使用 --env-file 指定的环境变量文件
    ports:
      - "3000:3000"  # 将宿主机端口 3000 映射到容器端口 3000
    volumes:
      - ./:/home/app  # 挂载本地目录到容器中
    depends_on:
      - mysql
    command: sh -c "python3 ./init.py && python3 ./server.py"  # 运行初始化脚本
    container_name:
      management-server
    networks:
      - management-network

  mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=mysql # 这里改成你想要的密码
    volumes:
      - ./datasheet/:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf.d/my.cnf  # 映射自定义的my.cnf
    container_name:
      management-mysql
    networks:
      - management-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    container_name:
      management-redis
    networks:
      - management-network

  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    image: management_python
    volumes:
      - ./:/home/app  # 挂载本地目录到容器中
    depends_on:
      - mysql
      - redis
      - server
    command: sh -c "celery -A server.celery worker --loglevel=info"
    container_name:
      management-server-celery
    networks:
      - management-network
    

networks:
  management-network:
    driver: bridge  # 使用默认的桥接网络驱动